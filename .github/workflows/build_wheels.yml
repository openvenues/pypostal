name: Build Wheels

on:
  push:
    branches: [ "main", "master"] # Adjust branches as needed
    tags:
      - 'v*'
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main", "master" ]
  workflow_dispatch: # Allow manual trigger
  schedule:
    - cron: "0 12 1 * *" # Run monthly on the 1st at 12:00 UTC
jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }} (${{ matrix.arch || 'native' }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Define specific combinations for Linux, keep macOS simple
        include:
          - os: ubuntu-latest # Standard x86_64 runner
            arch: x86_64
            cibw_archs: "x86_64"
          - os: ubuntu-22.04-arm # Native ARM64 runner
            arch: aarch64
            cibw_archs: "aarch64"
          - os: macos-latest # Builds both x86_64 and arm64 via cibuildwheel default
            arch: universal
            cibw_archs: "auto" # Let cibuildwheel handle macOS archs
          # - os: windows-latest # Add back if/when needed
          #   arch: AMD64
          #   cibw_archs: "AMD64"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true # Fetch the libpostal submodule

      # --- QEMU step is removed --- #

      # --- Add steps for caching the compiled libpostal --- #
      - name: Get libpostal submodule commit hash
        id: get_submodule_hash
        # Run in shell that supports pipelines and awk
        shell: bash 
        run: |
          # Need to cd into pypostal if workflow CWD is workspace root
          # cd pypostal # Remove this line, CWD should be repo root
          # Extract the commit hash (remove leading +/-, take first field)
          HASH=$(git submodule status vendor/libpostal | awk '{ sub(/^[+-]?/, ""); print $1 }')
          echo "hash=$HASH" >> $GITHUB_OUTPUT

      - name: Cache compiled libpostal library
        uses: actions/cache@v4
        with:
          # Cache the directory containing arch-specific builds
          # Path is relative to the repository root where setup.py runs
          path: build/libpostal_install_cache
          # Key includes OS, architecture, and the submodule hash
          key: ${{ matrix.os }}-${{ matrix.arch }}-libpostal-cache-${{ steps.get_submodule_hash.outputs.hash }}
          # Restore key prefix in case of exact miss
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.arch }}-libpostal-cache-
      # -------------------------------------------------- #
      
      # Ensure the base directory for the cache exists before cibuildwheel runs
      - name: Ensure cache directory exists
        shell: bash # Use bash for consistency across runners
        run: mkdir -p build/libpostal_install_cache

      # Windows Specific Setup: Install MSYS2 and required tools
      # Note: This step will only run if/when windows-latest is added back to the matrix
      - name: Set up MSYS2 (Windows)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64 # Or other environments like MSYS if needed
          update: true
          install: >- # Using multiline string for clarity
            mingw-w64-x86_64-toolchain
            autoconf
            automake
            libtool
            pkg-config
            curl
            make 
          # Note: automake-wrapper is often needed on MSYS2

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.17.0 # Use a recent version
        env:
          # Configure CIBW_BEFORE_BUILD_* for platform-specific dependency installation
          # Linux (manylinux): Use dnf (runs inside manylinux_2_28 container)
          # Note: Needs to run on both x86_64 and native arm64 runners now
          CIBW_BEFORE_BUILD_LINUX: "dnf install -y autoconf automake libtool pkgconfig curl perl-IPC-Cmd"
          
          # macOS: Use brew
          CIBW_BEFORE_BUILD_MACOS: "brew install autoconf automake libtool pkg-config curl"
          
          # Windows: Dependencies installed via msys2/setup-msys2 action above. 
          CIBW_BEFORE_BUILD_WINDOWS: "" # Dependencies installed in previous step if Windows is enabled

          # --- Use manylinux_2_28 images --- #
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_28
          # CIBW_MANYLINUX_I686_IMAGE: manylinux_2_28 # Uncomment if building i686
          # CIBW_MANYLINUX_PPC64LE_IMAGE: manylinux_2_28 # Uncomment if building ppc64le
          # CIBW_MANYLINUX_S390X_IMAGE: manylinux_2_28 # Uncomment if building s390x

          # --- Set PATH for Windows builds (only relevant if Windows matrix entry exists) --- #
          CIBW_ENVIRONMENT_WINDOWS: >
            PATH="C:\Windows\System32;C:\msys64\usr\bin;C:\msys64\mingw64\bin;{env_path}"

          # --- Specify Architectures based on matrix --- #
          # On Linux/Windows, we use the specific arch from the matrix.
          # On macOS, 'auto' lets cibuildwheel build both x86_64 and arm64.
          CIBW_ARCHS: ${{ matrix.cibw_archs }}

          # Skip PyPy, musllinux, and Python 3.7 on Windows (only relevant if Windows matrix entry exists)
          CIBW_SKIP: "pp* *-musllinux_* cp37-win*"
          
          # Increase build verbosity - Corrected escaping
          CIBW_BUILD_VERBOSITY: "1"

          # Test command: Basic import after install - Corrected escaping
          CIBW_TEST_COMMAND: "python -c \"import os; print('Testing postal import...'); import postal; print(f'postal imported successfully. __file__={postal.__file__}')\""
          # NOTE: Full functionality test requires data download (Phase 3)
          
        with:
          # Output directory for wheels
          output-dir: wheelhouse
          # Specify packages to build if pyproject.toml is not in root
          # package-dir: . # Assumes setup.py is in the root of pypostal

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          # Include OS and Arch in artifact name for clarity
          name: wheels-${{ matrix.os }}-${{ matrix.arch }}
          path: ./wheelhouse/*.whl 