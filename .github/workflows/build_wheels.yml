name: Build Wheels

on:
  push:
    branches:
      - "slop/pre_build_library" # Or your main branch
    tags:
      - 'v*' # Trigger on version tags
  pull_request:
    branches:
      - "slop/pre_build_library" # Or your main branch
  workflow_dispatch: # Allow manual trigger

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Use a minimal set for testing, expand later
        # os: [ubuntu-20.04, windows-2019, macos-12]
        # Refined OS list based on cibuildwheel recommendations and likely support
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true # Fetch the libpostal submodule

      - name: Set up QEMU (for Linux ARM builds)
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all # Or specify 'arm64'

      # Windows Specific Setup: Install MSYS2 and required tools
      - name: Set up MSYS2 (Windows)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64 # Or other environments like MSYS if needed
          update: true
          install: >- # Using multiline string for clarity
            mingw-w64-x86_64-toolchain
            autoconf
            automake-wrapper
            libtool
            pkg-config
            curl
            make 
          # Note: automake-wrapper is often needed on MSYS2

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.17.0 # Use a recent version
        env:
          # Configure CIBW_BEFORE_BUILD_* for platform-specific dependency installation
          # Linux (Ubuntu): Use apt-get with sudo
          CIBW_BEFORE_BUILD_LINUX: "sudo apt-get update && sudo apt-get install -y autoconf automake libtool pkg-config curl build-essential"
          
          # macOS: Use brew
          CIBW_BEFORE_BUILD_MACOS: "brew install autoconf automake libtool pkg-config curl"
          
          # Windows: Dependencies installed via msys2/setup-msys2 action above. 
          # We might need to ensure the MSYS2 paths are available to the build.
          # Setuptools might pick up MSVC by default; we might need to force MinGW if issues arise.
          # Example: CIBW_ENVIRONMENT_WINDOWS: PATH=\"{msys2_path}\\\mingw64\\\bin;{msys2_path}\\\usr\\\bin;{env_path}\""
          # This often requires careful handling of paths and ensuring the correct compiler is used.
          # For now, rely on setup-msys2 action adding tools to PATH.
          CIBW_BEFORE_BUILD_WINDOWS: \"\" # Dependencies installed in previous step

          # Set environment variable to potentially help find pkg-config files if needed
          # PKG_CONFIG_PATH: /usr/local/lib/pkgconfig:/usr/lib/pkgconfig # Example Linux/macOS

          # Specify architectures (example for Linux, macOS)
          CIBW_ARCHS_LINUX: \"auto aarch64\"
          CIBW_ARCHS_MACOS: \"x86_64 arm64\"
          CIBW_ARCHS_WINDOWS: \"auto\" # Usually AMD64

          # Skip PyPy for now as C extensions can be tricky
          CIBW_SKIP: \"pp*\"
          
          # Increase build verbosity
          CIBW_BUILD_VERBOSITY: \"1\"

          # Test command: Basic import after install
          CIBW_TEST_COMMAND: \"python -c \\\"import os; print('Testing postal import...'); import postal; print(f'postal imported successfully. __file__={postal.__file__}')\\\"\"
          # NOTE: Full functionality test requires data download (Phase 3)
          
          # --- Add potential fixes for common issues ---
          # Fix dynamic library loading issues on macOS? Might need DELOCATE_ আবLIB = 1
          # CIBW_ENVIRONMENT_MACOS: DELOCATE_ আবLIB=1
          
        with:
          # Output directory for wheels
          output-dir: wheelhouse
          # Specify packages to build if pyproject.toml is not in root
          # package-dir: pypostal # Uncomment if setup.py is in pypostal/

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl 